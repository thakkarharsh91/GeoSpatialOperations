package edu.asu.cse512;

import java.io.FileNotFoundException;
import java.util.ArrayList;

import org.apache.commons.collections.CollectionUtils;
import org.apache.spark.SparkConf;
import org.apache.spark.api.java.JavaPairRDD;
import org.apache.spark.api.java.JavaRDD;
import org.apache.spark.api.java.JavaSparkContext;
import org.apache.spark.api.java.function.Function;
import org.apache.spark.api.java.function.PairFunction;
import org.apache.spark.broadcast.Broadcast;

import edu.asu.cse512.FileToCsv;
import scala.Tuple2;

public class SpatialJoin {
    public static void spatialJoinQuery(String inputLocation1, String inputLocation2, String outputLocation, final String input1Type) throws FileNotFoundException
    {
        SparkConf conf = new SparkConf().setAppName("SpatialJoin").setMaster("local");
        JavaSparkContext sc = new JavaSparkContext(conf);
        JavaRDD<String> input1 = sc.textFile(inputLocation1);
        ArrayList<String> count = (ArrayList<String>) input1.collect();
        String[] stringArray = count.toArray(new String[0]);
        Broadcast<String[]> broadcast = sc.broadcast(stringArray);
        String[] broadcastValue = broadcast.value();
        final String[] broadInput1 = broadcastValue;
        JavaRDD<String> input2 = sc.textFile(inputLocation2);
        JavaPairRDD<ArrayList<String>, String> processRDD = input2
                .mapToPair(new PairFunction<String, ArrayList<String>, String>() {

                    /**
                     *
                     */

                    private static final long serialVersionUID = 1L;

                    public Tuple2<ArrayList<String>, String> call(String arg0) throws Exception {
                        ArrayList<String> output = new ArrayList<String>();
                        ArrayList<String> finalOutput = new ArrayList<String>();
                        String[] separateInput2 = arg0.split(",");
                        String bid = separateInput2[0];
                        double x1 = Double.parseDouble(separateInput2[1]);
                        double y1 = Double.parseDouble(separateInput2[2]);
                        double x2 = Double.parseDouble(separateInput2[3]);
                        double y2 = Double.parseDouble(separateInput2[4]);

                        ArrayList<String> aids = new ArrayList<String>();
                        for (String processInput1 : broadInput1) {
                            String[] separateInput1 = processInput1.split(",");

                            double a1 = Double.parseDouble(separateInput1[1]);
                            double b1 = Double.parseDouble(separateInput1[2]);
                            if(input1Type.equalsIgnoreCase("rectangle")){
                                double a2 = Double.parseDouble(separateInput1[3]);
                                double b2 = Double.parseDouble(separateInput1[4]);

                                if(((Math.min(x1, x2) <= a1 && Math.max(x1, x2) >= a1) || (Math.min(x1, x2) <= a2 && Math.max(x1, x2) >= a2))&& ((Math.min(y1, y2) <= b1 && Math.max(y1, y2) >= b1) || (Math.min(y1, y2) <= b2 && Math.max(y1, y2) >= b2)))
                                {
                                    String aid = separateInput1[0];
                                    aids.add(aid);
                                }
                                else if((Math.min(x1, x2) <= a1 && Math.max(x1, x2) >= a1) || (Math.min(x1, x2) <= a2 && Math.max(x1, x2) >= a2)){
                                    if((Math.max(b1, b2) - Math.min(b1, b2)) > ((Math.max(y1, y2) - (Math.min(y1, y2))))){
                                        String aid = separateInput1[0];
                                        aids.add(aid);
                                    }
                                }
                                else if((Math.min(y1, y2) <= b1 && Math.max(y1, y2) >= b1) || (Math.min(y1, y2) <= b2 && Math.max(y1, y2) >= b2)){
                                    if((Math.max(a1, a2) - Math.min(a1, a2)) > ((Math.max(x1, x2) - (Math.min(x1, x2))))){
                                        String aid = separateInput1[0];
                                        aids.add(aid);
                                    }
                                }
                                else if((Math.max(a1, a2) >= Math.max(x1, x2)) && (Math.min(a1, a2) <= Math.min(x1, x2)) && (Math.max(b1, b2) >= Math.max(y1, y2)) && (Math.min(b1, b2) <= Math.min(y1, y2))){
                                    String aid = separateInput1[0];
                                    aids.add(aid);
                                }
                            }
                            else{
                                if(a1 <= Math.max(x1, x2) && b1<=Math.max(y1, y2) && a1>=Math.min(x1, x2) && b1 >= Math.min(y1, y2)){
                                    String aid = separateInput1[0];
                                    aids.add(aid);
                                }
                            }
                        }
                        if(!CollectionUtils.isEmpty(aids))
                        {
                            aids.add(0, bid);
                            output.addAll(aids);
                        }

                        finalOutput.addAll(output);
                        if(CollectionUtils.isEmpty(finalOutput))
                        {
                            for (String processInput1 : broadInput1)
                            {
                                String[] separateInput1 = processInput1.split(",");
                                String aid = separateInput1[0];
                                finalOutput.add(aid+",NULL");
                            }
                        }
                        return new Tuple2<ArrayList<String>, String>(finalOutput, "");
                    }
                });
        JavaRDD<String> outputData = processRDD.map(new Function<Tuple2<ArrayList<String>,String>, String>() {

            public String call(Tuple2<ArrayList<String>, String> data) throws Exception {
                String result = data._1().get(0);
                for(int i =1;i<data._1().size();i++){
                    result += ",";
                    result+=data._1().get(i);
                }
                return result;
            }
        }).repartition(1).sortBy(new Function<String, String>() {

            public String call(String str) throws Exception {
                // TODO Auto-generated method stub
                return str;
            }
        }, true, 1);
		
        int index=outputLocation.lastIndexOf("/");
		String hadoopPath=outputLocation.substring(0, index);
		String intermediateResultpath=hadoopPath+"/IntermediateSpatialJoinResult";

		FileToCsv.deleteExistingFile(intermediateResultpath);
		outputData.saveAsTextFile(intermediateResultpath);
		
		FileToCsv.fileToCsv(intermediateResultpath, outputLocation);
    }
}