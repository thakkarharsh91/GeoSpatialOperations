package group10.SpatialOperation;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.apache.spark.SparkConf;
import org.apache.spark.api.java.JavaRDD;
import org.apache.spark.api.java.JavaSparkContext;
import org.apache.spark.api.java.function.FlatMapFunction;

import com.vividsolutions.jts.algorithm.ConvexHull;
import com.vividsolutions.jts.geom.Coordinate;
import com.vividsolutions.jts.geom.GeometryFactory;

public class FarthestPoint {

	public static void geometryFarthestPair(String inputLocation,String outputLocation)

	{
		JavaSparkContext sparkContext = FarthestPair.sparkContext;
		JavaRDD<String> lines = sparkContext.textFile(args[1]);
		JavaRDD<Coordinate> partitionMapping = lines.mapPartitions( new FlatMapFunction<Iterator<String>, Coordinate>() 
				{
					private static final long serialVersionUID = 1L;

					public Iterable<Coordinate> call(Iterator<String> coordinateIterator) throws Exception 
					{
						ArrayList<Coordinate> currentCoordinateList = new ArrayList<Coordinate>();
						for(;coordinateIterator.hasNext();)
						{
							String strTemp = coordinateIterator.next();
							String[] tempCoordArray = strTemp.split(",");
							
							Double coor_x,coor_y = 0.0;
							Coordinate coord = null;
							if(ConvexHullOperation.isNumber(tempCoordArray[0]) && ConvexHullOperation.isNumber(tempCoordArray[1]))
							{
								coor_x = Double.parseDouble(tempCoordArray[0]);
								coor_y = Double.parseDouble(tempCoordArray[1]);
								coord = new Coordinate(coor_x,coor_y);
							}
							if(coord != null)
							{
								currentCoordinateList.add(coord);
							}
								
						}
						GeometryFactory geometryFactor = new GeometryFactory();
						ConvexHull convexHull = new ConvexHull(currentCoordinateList.toArray(new Coordinate[currentCoordinateList.size()]), geometryFactor);
						Coordinate[] coordinateListArray  = convexHull.getConvexHull().getCoordinates();
						List<Coordinate> finalCoordinateList = new ArrayList<Coordinate>();
						for(Coordinate coor : coordinateListArray)
						{
							if(finalCoordinateList.contains(coor) == false)
								finalCoordinateList.add(coor);
						}
						return finalCoordinateList;
					}
				});
		
		partitionMapping.saveAsTextFile(args[2]);
		
		JavaRDD<Coordinate> partialReducedList = partitionMapping.repartition(1); //check for more number of partitions
		
		JavaRDD<Coordinate> finalReducedRRD = partialReducedList.mapPartitions( new FlatMapFunction<Iterator<Coordinate>, Coordinate>()
			{
				private static final long serialVersionUID = 1L;
				
				public Iterable<Coordinate> call(Iterator<Coordinate> allReducedListCoordinates)
				{
					ArrayList<Coordinate> intermediateCoordinateList = new ArrayList<Coordinate>();
					
					for(;allReducedListCoordinates.hasNext();)
					{
						Coordinate currentProcessingCoordinate = allReducedListCoordinates.next(); 
							//if(intermediateCoordinateList.contains(currentProcessingCoordinate) == false)
						intermediateCoordinateList.add(currentProcessingCoordinate);
					}
						
					
					GeometryFactory geom = new GeometryFactory();
					ConvexHull convexHull = new ConvexHull(intermediateCoordinateList.toArray(new Coordinate[intermediateCoordinateList.size()]), geom);
					Coordinate[] coordinateListArray = convexHull.getConvexHull().getCoordinates();
	
					
					List<Coordinate> finalCoordinateList = new ArrayList<Coordinate>();
					for(Coordinate coor : coordinateListArray)
					{
						if(finalCoordinateList.contains(coor) == false)
							finalCoordinateList.add(coor);
					}
					
					return finalCoordinateList;
				}
			});
	
		List<Coordinate> final_array = finalReducedRRD.toArray();
		
		Coordinate t1, t2, final1 = null, final2 = null;
		
		double max_distance = 0;
				
		for (int i = 0;i < final_array.size();i++)
		{
			t1 = final_array.get(i);
			double x1 = t1.x;
			double y1 = t1.y;
					
			for (int j = 0;j < final_array.size();j++)
			{
				t2 = final_array.get(j);
				double x2 = t2.x;
				double y2 = t2.y;
				
				double xcor_diff = x1 - x2;
				double xcor_square = Math.pow(xcor_diff, 2);
				
				double ycor_diff = y1 - y2;
				double ycor_square = Math.pow(ycor_diff, 2);
				
				double distance = Math.sqrt(xcor_square + ycor_square);
				
				if (distance >= max_distance)
				{
					final1 = t1;
					final2 = t2;
					max_distance = distance;
				}
				else
					continue;
			}
		}
		
		List<Coordinate> final_list = new ArrayList<Coordinate>();
		final_list.add(final1);
		final_list.add(final2);
		JavaRDD<Coordinate> final_output= sparkContext.parallelize(final_list).repartition(1);
		final_output.saveAsTextFile(args[3]);
		sparkContext.close();
	}

	public static boolean isNumber(String s) 
	{
		try { 
		      Double.parseDouble(s); 
		   } catch(NumberFormatException e) { 
		      return false; 
		   }
		   return true;
	}

}

